precision mediump float;

varying vec4 v_color;       //from vertex shader
varying vec2 texCoord;      //from vertex shader

uniform sampler2D sampler2d;

uniform highp float wave;
uniform highp float waveWidth;
uniform highp float waveOriginX;
uniform highp float waveOriginY;
uniform highp float aspectRatio;

void main()
{    
    mediump vec2 origin = vec2(waveOriginX, (1.0 - waveOriginY) / aspectRatio);
    mediump vec2 texCoord2 = texCoord;

    highp float fragmentDistance = distance(vec2(texCoord2.s, texCoord2.t / aspectRatio), origin);
    highp float waveLength = waveWidth + fragmentDistance * 0.25;

    if ( fragmentDistance > wave && fragmentDistance < wave + waveLength) {
        highp float distanceFromWaveEdge = min(abs(wave - fragmentDistance), abs(wave + waveLength - fragmentDistance));
        texCoord2 += sin(1.57075 * distanceFromWaveEdge / waveLength) * distanceFromWaveEdge * 0.08 / fragmentDistance;
    }

    gl_FragColor = texture2D(sampler2d, texCoord2.st);
}
